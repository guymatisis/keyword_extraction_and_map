<i>Figure</i> <i>15-6.</i> <i>Time</i> <i>series</i> <i>forecasting</i>
generate_time_series()
For simplicity, we are using a time series generated by the
function, shown here:
<b>def</b> generate_time_series(batch_size, n_steps):
freq1, freq2, offsets1, offsets2 = np.random.rand(4, batch_size, 1)
time = np.linspace(0, 1, n_steps)
series = 0.5 * np.sin((time - offsets1) * (freq1 * 10 + 10)) <i>#</i> <i>wave</i> <i>1</i>
series += 0.2 * np.sin((time - offsets2) * (freq2 * 20 + 20)) <i>#</i> <i>+</i> <i>wave</i> <i>2</i>
series += 0.1 * (np.random.rand(batch_size, n_steps) - 0.5) <i>#</i> <i>+</i> <i>noise</i>
<b>return</b> series[..., np.newaxis].astype(np.float32)
batch_size
This function creates as many time series as requested (via the argu‐
ment), each of length n_steps , and there is just one value per time step in each series
(i.e., all series are univariate). The function returns a NumPy array of shape [batch
<i>size,</i> <i>time</i> <i>steps,</i> 1], where each series is the sum of two sine waves of fixed amplitudes
but random frequencies and phases, plus a bit of noise.
When dealing with time series (and other types of sequences such
as sentences), the input features are generally represented as 3D
arrays of shape [batch <i>size,</i> <i>time</i> <i>steps,</i> <i>dimensionality],</i> where
<i>dimensionality</i> is 1 for univariate time series and more for multi‐
variate time series.
Now let’s create a training set, a validation set, and a test set using this function:
n_steps = 50
series = generate_time_series(10000, n_steps + 1)
X_train, y_train = series[:7000, :n_steps], series[:7000, -1]
X_valid, y_valid = series[7000:9000, :n_steps], series[7000:9000, -1]
X_test, y_test = series[9000:, :n_steps], series[9000:, -1]
X_train X_valid
contains 7,000 time series (i.e., its shape is [7000, 50, 1]), while con‐
tains 2,000 (from the 7,000th time series to the 8,999th) and X_test contains 1,000
(from the 9,000 th to the 9,999 th ). Since we want to forecast a single value for each ser‐
y_train
ies, the targets are column vectors (e.g., has a shape of [7000, 1]).