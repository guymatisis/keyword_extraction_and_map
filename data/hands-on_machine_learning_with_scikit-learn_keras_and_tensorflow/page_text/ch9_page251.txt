                                                                      
                                                                      
                                                                      
                                                                      
                                                                      
                                                                      
                                                                      
                                                                      
                                                                      
                                                                      
                                                                      
                                                                      
                                                                      
                                                                      
                                                                      
                                                                      
                                                                      
                                                                      
                                                                      
          Figure 9-12. Image segmentation using K-Means with various numbers of color clusters
                                                                      
          That wasn’t too hard, was it? Now let’s look at another application of clustering: pre‐
          processing.                                                 
          Using Clustering for Preprocessing                          
                                                                      
          Clustering can be an efficient approach to dimensionality reduction, in particular as a
          preprocessing step before a supervised learning algorithm. As an example of using
          clustering for dimensionality reduction, let’s tackle the digits dataset, which is a sim‐
          ple MNIST-like dataset containing 1,797 grayscale 8 × 8 images representing the dig‐
          its 0 to 9. First, load the dataset:                        
            from sklearn.datasets import load_digits                  
                                                                      
            X_digits, y_digits = load_digits(return_X_y=True)         
          Now, split it into a training set and a test set:           
            from sklearn.model_selection import train_test_split      
                                                                      
            X_train, X_test, y_train, y_test = train_test_split(X_digits, y_digits)
          Next, fit a Logistic Regression model:                      
                                                                      
            from sklearn.linear_model import LogisticRegression       
            log_reg = LogisticRegression()                            
            log_reg.fit(X_train, y_train)                             
          Let’s evaluate its accuracy on the test set:                
                                                                      
            >>> log_reg.score(X_test, y_test)                         
            0.9688888888888889                                        