                                                                      
                                                                      
                                                                      
                                                                      
            model = keras.models.Sequential([                         
               keras.layers.Flatten(input_shape=[28, 28]),            
               keras.layers.Dense(300, activation="relu"),            
               keras.layers.Dense(100, activation="relu"),            
               keras.layers.Dense(10, activation="softmax")           
            ])                                                        
                       Using Code Examples from keras.io              
                                                                      
           Code examples documented on keras.io will work fine with tf.keras, but you need to
           change the imports. For example, consider this keras.io code:
             from keras.layers import Dense                           
             output_layer = Dense(10)                                 
           You must change the imports like this:                     
                                                                      
             from tensorflow.keras.layers import Dense                
             output_layer = Dense(10)                                 
           Or simply use full paths, if you prefer:                   
             from tensorflow import keras                             
             output_layer = keras.layers.Dense(10)                    
           This approach is more verbose, but I use it in this book so you can easily see which
           packages to use, and to avoid confusion between standard classes and custom classes.
           In production code, I prefer the previous approach. Many people also use from ten
           sorflow.keras import layers followed by layers.Dense(10).  
                                                                      
                                                                      
          The model’s summary() method displays all the model’s layers,14 including each layer’s
          name (which is automatically generated unless you set it when creating the layer), its
          output shape (None means the batch size can be anything), and its number of parame‐
          ters. The summary ends with the total number of parameters, including trainable and
          non-trainable parameters. Here we only have trainable parameters (we will see exam‐
          ples of non-trainable parameters in Chapter 11):            
            >>> model.summary()                                       
            Model: "sequential"                                       
            _________________________________________________________________
            Layer (type)     Output Shape    Param #                  
            =================================================================
            flatten (Flatten) (None, 784)    0                        
            _________________________________________________________________
            dense (Dense)    (None, 300)     235500                   
            _________________________________________________________________
                                                                      
          14 You can use keras.utils.plot_model() to generate an image of your model.