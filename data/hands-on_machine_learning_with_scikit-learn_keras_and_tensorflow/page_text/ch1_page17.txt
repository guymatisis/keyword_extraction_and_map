<i>Figure</i> <i>1-14.</i> <i>Using</i> <i>online</i> <i>learning</i> <i>to</i> <i>handle</i> <i>huge</i> <i>datasets</i>
A big challenge with online learning is that if bad data is fed to the system, the sys‐
tem’s performance will gradually decline. If it’s a live system, your clients will notice.
For example, bad data could come from a malfunctioning sensor on a robot, or from
someone spamming a search engine to try to rank high in search results. To reduce
this risk, you need to monitor your system closely and promptly switch learning off
(and possibly revert to a previously working state) if you detect a drop in perfor‐
mance. You may also want to monitor the input data and react to abnormal data (e.g.,
using an anomaly detection algorithm).
<header><largefont><b>Instance-Based</b></largefont> <largefont><b>Versus</b></largefont> <largefont><b>Model-Based</b></largefont> <largefont><b>Learning</b></largefont></header>
One more way to categorize Machine Learning systems is by how they <i>generalize.</i>
Most Machine Learning tasks are about making predictions. This means that given a
number of training examples, the system needs to be able to make good predictions
for (generalize to) examples it has never seen before. Having a good performance
measure on the training data is good, but insufficient; the true goal is to perform well
on new instances.
There are two main approaches to generalization: instance-based learning and
model-based learning.
<b>Instance-basedlearning</b>
Possibly the most trivial form of learning is simply to learn by heart. If you were to
create a spam filter this way, it would just flag all emails that are identical to emails
that have already been flagged by users—not the worst solution, but certainly not the
best.