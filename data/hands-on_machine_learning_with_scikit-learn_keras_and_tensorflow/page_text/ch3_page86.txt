                                                                      
                                                                      
                                                                      
                                                                      
          Datasets loaded by Scikit-Learn generally have a similar dictionary structure, includ‐
          ing the following:                                          
                                                                      
           • A DESCR key describing the dataset                       
           • A data key containing an array with one row per instance and one column per
            feature                                                   
                                                                      
           • A target key containing an array with the labels         
          Let’s look at these arrays:                                 
                                                                      
            >>> X, y = mnist["data"], mnist["target"]                 
            >>> X.shape                                               
            (70000, 784)                                              
            >>> y.shape                                               
            (70000,)                                                  
          There are 70,000 images, and each image has 784 features. This is because each image
          is 28 × 28 pixels, and each feature simply represents one pixel’s intensity, from 0
          (white) to 255 (black). Let’s take a peek at one digit from the dataset. All you need to
          do is grab an instance’s feature vector, reshape it to a 28 × 28 array, and display it
          using Matplotlib’s imshow() function:                       
            import matplotlib as mpl                                  
            import matplotlib.pyplot as plt                           
            some_digit = X[0]                                         
            some_digit_image = some_digit.reshape(28, 28)             
            plt.imshow(some_digit_image, cmap="binary")               
            plt.axis("off")                                           
            plt.show()                                                
                                                                      
                                                                      
                                                                      
                                                                      
                                                                      
                                                                      
          This looks like a 5, and indeed that’s what the label tells us:
            >>> y[0]                                                  
            '5'                                                       
                                                                      
          Note that the label is a string. Most ML algorithms expect numbers, so let’s cast y to
          integer:                                                    
            >>> y = y.astype(np.uint8)                                
                                                                      
                                                                      