fully connected layers (+ReLUs), and the final layer outputs the prediction (e.g., a
softmax layer that outputs estimated class probabilities).
<i>Figure</i> <i>14-11.</i> <i>Typical</i> <i>CNN</i> <i>architecture</i>
A common mistake is to use convolution kernels that are too large.
For example, instead of using a convolutional layer with a 5 × 5
kernel, stack two layers with 3 × 3 kernels: it will use fewer parame‐
ters and require fewer computations, and it will usually perform
better. One exception is for the first convolutional layer: it can typi‐
cally have a large kernel (e.g., 5 × 5), usually with a stride of 2 or
more: this will reduce the spatial dimension of the image without
losing too much information, and since the input image only has
three channels in general, it will not be too costly.
Here is how you can implement a simple CNN to tackle the Fashion MNIST dataset
(introduced in Chapter 10):
model = keras.models.Sequential([
keras.layers.Conv2D(64, 7, activation="relu", padding="same",
input_shape=[28, 28, 1]),
keras.layers.MaxPooling2D(2),
keras.layers.Conv2D(128, 3, activation="relu", padding="same"),
keras.layers.Conv2D(128, 3, activation="relu", padding="same"),
keras.layers.MaxPooling2D(2),
keras.layers.Conv2D(256, 3, activation="relu", padding="same"),
keras.layers.Conv2D(256, 3, activation="relu", padding="same"),
keras.layers.MaxPooling2D(2),
keras.layers.Flatten(),
keras.layers.Dense(128, activation="relu"),
keras.layers.Dropout(0.5),
keras.layers.Dense(64, activation="relu"),
keras.layers.Dropout(0.5),
keras.layers.Dense(10, activation="softmax")
])