Let’s try to build a classifier to detect the <i>Iris</i> <i>virginica</i> type based only on the petal
width feature. First let’s load the data:
<b>>>></b> <b>from</b> <b>sklearn</b> <b>import</b> datasets
<b>>>></b> iris = datasets.load_iris()
<b>>>></b> list(iris.keys())
['data', 'target', 'target_names', 'DESCR', 'feature_names', 'filename']
<b>>>></b> X = iris["data"][:, 3:] <i>#</i> <i>petal</i> <i>width</i>
<b>>>></b> y = (iris["target"] == 2).astype(np.int) <i>#</i> <i>1</i> <i>if</i> <i>Iris</i> <i>virginica,</i> <i>else</i> <i>0</i>
Now let’s train a Logistic Regression model:
<b>from</b> <b>sklearn.linear_model</b> <b>import</b> LogisticRegression
log_reg = LogisticRegression()
log_reg.fit(X, y)
Let’s look at the model’s estimated probabilities for flowers with petal widths varying
from 0 cm to 3 cm (Figure 4-23):15
X_new = np.linspace(0, 3, 1000).reshape(-1, 1)
y_proba = log_reg.predict_proba(X_new)
plt.plot(X_new, y_proba[:, 1], "g-", label="Iris virginica")
plt.plot(X_new, y_proba[:, 0], "b--", label="Not Iris virginica")
<i>#</i> <i>+</i> <i>more</i> <i>Matplotlib</i> <i>code</i> <i>to</i> <i>make</i> <i>the</i> <i>image</i> <i>look</i> <i>pretty</i>
<i>Figure</i> <i>4-23.</i> <i>Estimated</i> <i>probabilities</i> <i>and</i> <i>decision</i> <i>boundary</i>
The petal width of <i>Iris</i> <i>virginica</i> flowers (represented by triangles) ranges from 1.4 cm
to 2.5 cm, while the other iris flowers (represented by squares) generally have a
smaller petal width, ranging from 0.1 cm to 1.8 cm. Notice that there is a bit of over‐
lap. Above about 2 cm the classifier is highly confident that the flower is an <i>Iris</i> <i>virgin‐</i>
<i>ica</i> (it outputs a high probability for that class), while below 1 cm it is highly
confident that it is not an <i>Iris</i> <i>virginica</i> (high probability for the “Not Iris virginica”
reshape()
15 NumPy’s functionallowsonedimensiontobe–1,whichmeans“unspecified”:thevalueisinferred
fromthelengthofthearrayandtheremainingdimensions.