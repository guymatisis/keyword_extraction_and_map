<i>Figure</i> <i>19-7.</i> <i>Creating</i> <i>a</i> <i>new</i> <i>service</i> <i>account</i> <i>in</i> <i>Google</i> <i>IAM</i>
Great! Now let’s write a small script that will query the prediction service. Google
provides several libraries to simplify access to its services:
<i>Google</i> <i>API</i> <i>Client</i> <i>Library</i>
This is a fairly thin layer on top of <i>OAuth</i> <i>2.0</i> (for the authentication) and REST.
You can use it with all GCP services, including AI Platform. You can install it
google-api-python-client
using pip: the library is called .
<i>Google</i> <i>Cloud</i> <i>Client</i> <i>Libraries</i>
These are a bit more high-level: each one is dedicated to a particular service, such
as GCS, Google BigQuery, Google Cloud Natural Language, and Google Cloud
Vision. All these libraries can be installed using pip (e.g., the GCS Client Library
is called google-cloud-storage). When a client library is available for a given
service, it is recommended to use it rather than the Google API Client Library, as
it implements all the best practices and will often use gRPC rather than REST, for
better performance.
At the time of this writing there is no client library for AI Platform, so we will use the
Google API Client Library. It will need to use the service account’s private key; you
GOOGLE_APPLICATION_CREDENTIALS
can tell it where it is by setting the environment
variable, either before starting the script or within the script like this:
<b>import</b> <b>os</b>
os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = "my_service_account_key.json"