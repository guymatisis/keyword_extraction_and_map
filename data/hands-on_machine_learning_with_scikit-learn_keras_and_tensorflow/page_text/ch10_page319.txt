<i>Figure</i> <i>10-17.</i> <i>Visualizing</i> <i>learning</i> <i>curves</i> <i>with</i> <i>TensorBoard</i>
You can also visualize the whole graph, the learned weights (projected to 3D), or the
TensorBoard()
profiling traces. The callback has options to log extra data too, such
as embeddings (see Chapter 13).
Additionally, TensorFlow offers a lower-level API in the tf.summary package. The
SummaryWriter create_file_writer()
following code creates a using the function,
and it uses this writer as a context to log scalars, histograms, images, audio, and text,
all of which can then be visualized using TensorBoard (give it a try!):
test_logdir = get_run_logdir()
writer = tf.summary.create_file_writer(test_logdir)
<b>with</b> writer.as_default():
<b>for</b> step <b>in</b> range(1, 1000 + 1):
tf.summary.scalar("my_scalar", np.sin(step / 10), step=step)
data = (np.random.randn(100) + 2) * step / 100 <i>#</i> <i>some</i> <i>random</i> <i>data</i>
tf.summary.histogram("my_hist", data, buckets=50, step=step)
images = np.random.rand(2, 32, 32, 3) <i>#</i> <i>random</i> <i>32Ã—32</i> <i>RGB</i> <i>images</i>
tf.summary.image("my_images", images * step / 1000, step=step)
texts = ["The step is " + str(step), "Its square is " + str(step**2)]
tf.summary.text("my_text", texts, step=step)
sine_wave = tf.math.sin(tf.range(12000) / 48000 * 2 * np.pi * step)
audio = tf.reshape(tf.cast(sine_wave, tf.float32), [1, -1, 1])
tf.summary.audio("my_audio", audio, sample_rate=48000, step=step)