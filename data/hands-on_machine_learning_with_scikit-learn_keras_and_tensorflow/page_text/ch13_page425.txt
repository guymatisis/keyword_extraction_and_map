                                                                      
                                                                      
                                                                      
                                                                      
          And you can then use a tf.data.TFRecordDataset to read one or more TFRecord
          files:                                                      
                                                                      
            filepaths = ["my_data.tfrecord"]                          
            dataset = tf.data.TFRecordDataset(filepaths)              
            for item in dataset:                                      
               print(item)                                            
          This will output:                                           
            tf.Tensor(b'This is the first record', shape=(), dtype=string)
            tf.Tensor(b'And this is the second record', shape=(), dtype=string)
                                                                      
                   By default, a TFRecordDataset will read files one by one, but you
                   can make it read multiple files in parallel and interleave their
                   records by setting num_parallel_reads. Alternatively, you could
                   obtain the same result by using list_files() and interleave()
                   as we did earlier to read multiple CSV files.      
          Compressed TFRecord Files                                   
                                                                      
          It can sometimes be useful to compress your TFRecord files, especially if they need to
          be loaded via a network connection. You can create a compressed TFRecord file by
          setting the options argument:                               
            options = tf.io.TFRecordOptions(compression_type="GZIP")  
            with tf.io.TFRecordWriter("my_compressed.tfrecord", options) as f:
             [...]                                                    
          When reading a compressed TFRecord file, you need to specify the compression type:
            dataset = tf.data.TFRecordDataset(["my_compressed.tfrecord"],
                                compression_type="GZIP")              
                                                                      
          A Brief Introduction to Protocol Buffers                    
                                                                      
          Even though each record can use any binary format you want, TFRecord files usually
          contain serialized protocol buffers (also called protobufs). This is a portable, extensi‐
          ble, and efficient binary format developed at Google back in 2001 and made open
          source in 2008; protobufs are now widely used, in particular in gRPC, Google’s
          remote procedure call system. They are defined using a simple language that looks
          like this:                                                  
            syntax = "proto3";                                        
            message Person {                                          
             string name = 1;                                         
             int32 id = 2;                                            
             repeated string email = 3;                               
            }                                                         