                                                                      
                                                                      
                                                                      
                                                                      
            build() method: this tells Keras that the layer is built (it just sets
            self.built=True).                                         
                                                                      
           • The call() method performs the desired operations. In this case, we compute
            the matrix multiplication of the inputs X and the layer’s kernel, we add the bias
            vector, and we apply the activation function to the result, and this gives us the
            output of the layer.                                      
           • The compute_output_shape() method simply returns the shape of this layer’s
            outputs. In this case, it is the same shape as the inputs, except the last dimension
            is replaced with the number of neurons in the layer. Note that in tf.keras, shapes
            are instances of the tf.TensorShape class, which you can convert to Python lists
            using as_list().                                          
           • The get_config() method is just like in the previous custom classes. Note that
            we save the activation function’s full configuration by calling keras.activa
            tions.serialize().                                        
                                                                      
          You can now use a MyDense layer just like any other layer!  
                                                                      
                   You can generally omit the compute_output_shape() method, as
                   tf.keras automatically infers the output shape, except when the
                   layer is dynamic (as we will see shortly). In other Keras implemen‐
                   tations, this method is either required or its default implementation
                   assumes the output shape is the same as the input shape.
                                                                      
          To create a layer with multiple inputs (e.g., Concatenate), the argument to the call()
          method should be a tuple containing all the inputs, and similarly the argument to the
          compute_output_shape() method should be a tuple containing each input’s batch
          shape. To create a layer with multiple outputs, the call() method should return the
          list of outputs, and compute_output_shape() should return the list of batch output
          shapes (one per output). For example, the following toy layer takes two inputs and
          returns three outputs:                                      
            class MyMultiLayer(keras.layers.Layer):                   
               def call(self, X):                                     
                 X1, X2 = X                                           
                 return [X1 + X2, X1 * X2, X1 / X2]                   
               def compute_output_shape(self, batch_input_shape):     
                 b1, b2 = batch_input_shape                           
                 return [b1, b1, b1] # should probably handle broadcasting rules
                                                                      
                                                                      
                                                                      
                                                                      