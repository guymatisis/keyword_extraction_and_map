This layer may now be used like any other layer, but of course only using the Func‐
tional and Subclassing APIs, not the Sequential API (which only accepts layers with
one input and one output).
If your layer needs to have a different behavior during training and during testing
Dropout BatchNormalization train
(e.g., if it uses or layers), then you must add a
ing argument to the call() method and use this argument to decide what to do. For
example, let’s create a layer that adds Gaussian noise during training (for regulariza‐
tion) but does nothing during testing (Keras has a layer that does the same thing,
keras.layers.GaussianNoise
):
<b>class</b> <b>MyGaussianNoise(keras.layers.Layer):</b>
<b>def</b> <b>__init__(self,</b> stddev, **kwargs):
super().__init__(**kwargs)
self.stddev = stddev
<b>def</b> call(self, X, training=None):
<b>if</b> training:
noise = tf.random.normal(tf.shape(X), stddev=self.stddev)
<b>return</b> X + noise
<b>else:</b>
<b>return</b> X
<b>def</b> compute_output_shape(self, batch_input_shape):
<b>return</b> batch_input_shape
With that, you can now build any custom layer you need! Now let’s create custom
models.
<header><largefont><b>Custom</b></largefont> <largefont><b>Models</b></largefont></header>
We already looked at creating custom model classes in Chapter 10, when we dis‐
cussed the Subclassing API. 10 It’s straightforward: subclass the keras.Model class, cre‐
call()
ate layers and variables in the constructor, and implement the method to do
whatever you want the model to do. Suppose you want to build the model repre‐
sented in Figure 12-3.
10 Thename“SubclassingAPI”usuallyrefersonlytothecreationofcustommodelsbysubclassing,although
manyotherthingscanbecreatedbysubclassing,aswesawinthischapter.