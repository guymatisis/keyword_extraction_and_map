<b>>>></b> housing_cat = housing[["ocean_proximity"]]
<b>>>></b> housing_cat.head(10)
ocean_proximity
17606 <1H OCEAN
18632 <1H OCEAN
14650 NEAR OCEAN
3230 INLAND
3555 <1H OCEAN
19480 INLAND
8879 <1H OCEAN
13685 INLAND
4937 <1H OCEAN
4861 <1H OCEAN
It’s not arbitrary text: there are a limited number of possible values, each of which
represents a category. So this attribute is a categorical attribute. Most Machine Learn‐
ing algorithms prefer to work with numbers, so let’s convert these categories from
OrdinalEncoder class:19
text to numbers. For this, we can use Scikit-Learn’s
<b>>>></b> <b>from</b> <b>sklearn.preprocessing</b> <b>import</b> OrdinalEncoder
<b>>>></b> ordinal_encoder = OrdinalEncoder()
<b>>>></b> housing_cat_encoded = ordinal_encoder.fit_transform(housing_cat)
<b>>>></b> housing_cat_encoded[:10]
array([[0.],
[0.],
[4.],
[1.],
[0.],
[1.],
[0.],
[1.],
[0.],
[0.]])
categories_
You can get the list of categories using the instance variable. It is a list
containing a 1D array of categories for each categorical attribute (in this case, a list
containing a single array since there is just one categorical attribute):
<b>>>></b> ordinal_encoder.categories_
[array(['<1H OCEAN', 'INLAND', 'ISLAND', 'NEAR BAY', 'NEAR OCEAN'],
dtype=object)]
One issue with this representation is that ML algorithms will assume that two nearby
values are more similar than two distant values. This may be fine in some cases (e.g.,
for ordered categories such as “bad,” “average,” “good,” and “excellent”), but it is obvi‐
ously not the case for the ocean_proximity column (for example, categories 0 and 4
are clearly more similar than categories 0 and 1). To fix this issue, a common solution
19 ThisclassisavailableinScikit-Learn0.20andlater.Ifyouuseanearlierversion,pleaseconsiderupgrading,or
Series.factorize()
usethepandas method.