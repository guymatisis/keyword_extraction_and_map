<b>import</b> <b>numpy</b> <b>as</b> <b>np</b>
<b>def</b> split_train_test(data, test_ratio):
shuffled_indices = np.random.permutation(len(data))
test_set_size = int(len(data) * test_ratio)
test_indices = shuffled_indices[:test_set_size]
train_indices = shuffled_indices[test_set_size:]
<b>return</b> data.iloc[train_indices], data.iloc[test_indices]
You can then use this function like this: 13
<b>>>></b> train_set, test_set = split_train_test(housing, 0.2)
<b>>>></b> len(train_set)
16512
<b>>>></b> len(test_set)
4128
Well, this works, but it is not perfect: if you run the program again, it will generate a
different test set! Over time, you (or your Machine Learning algorithms) will get to
see the whole dataset, which is what you want to avoid.
One solution is to save the test set on the first run and then load it in subsequent
runs. Another option is to set the random number generator’s seed (e.g., with np.ran
dom.seed(42) ) 14 before calling np.random.permutation() so that it always generates
the same shuffled indices.
But both these solutions will break the next time you fetch an updated dataset. To
have a stable train/test split even after updating the dataset, a common solution is to
use each instance’s identifier to decide whether or not it should go in the test set
(assuming instances have a unique and immutable identifier). For example, you could
compute a hash of each instance’s identifier and put that instance in the test set if the
hash is lower than or equal to 20% of the maximum hash value. This ensures that the
test set will remain consistent across multiple runs, even if you refresh the dataset.
The new test set will contain 20% of the new instances, but it will not contain any
instance that was previously in the training set.
Here is a possible implementation:
<b>from</b> <b>zlib</b> <b>import</b> crc32
<b>def</b> test_set_check(identifier, test_ratio):
<b>return</b> crc32(np.int64(identifier)) & 0xffffffff < test_ratio * 2**32
13 Inthisbook,whenacodeexamplecontainsamixofcodeandoutputs,asisthecasehere,itisformattedlike
inthePythoninterpreter,forbetterreadability:thecodelinesareprefixedwith>>>(or...forindented
blocks),andtheoutputshavenoprefix.
14 Youwilloftenseepeoplesettherandomseedto42.Thisnumberhasnospecialproperty,otherthantobethe
AnswertotheUltimateQuestionofLife,theUniverse,andEverything.