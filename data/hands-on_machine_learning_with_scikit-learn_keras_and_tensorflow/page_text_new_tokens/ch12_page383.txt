In practice you will rarely have to create variables manually, since
add_weight()
Keras provides an method that will take care of it for
you, as we will see. Moreover, model parameters will generally be
updated directly by the optimizers, so you will rarely need to
update variables manually.
<header><largefont><b>Other</b></largefont> <largefont><b>Data</b></largefont> <largefont><b>Structures</b></largefont></header>
TensorFlow supports several other data structures, including the following (please see
the “Tensors and Operations” section in the notebook or Appendix F for more
details):
<i>Sparse</i> <i>tensors</i> <i>(</i> tf.SparseTensor <i>)</i>
tf.sparse
Efficiently represent tensors containing mostly zeros. The package
contains operations for sparse tensors.
<i>Tensor</i> <i>arrays</i> <i>(</i> tf.TensorArray <i>)</i>
Are lists of tensors. They have a fixed size by default but can optionally be made
dynamic. All tensors they contain must have the same shape and data type.
<i>(tf.RaggedTensor)</i>
<i>Ragged</i> <i>tensors</i>
Represent static lists of lists of tensors, where every tensor has the same shape
and data type. The tf.ragged package contains operations for ragged tensors.
<i>String</i> <i>tensors</i>
Are regular tensors of type tf.string . These represent byte strings, not Unicode
strings, so if you create a string tensor using a Unicode string (e.g., a regular
"café"
Python 3 string like ), then it will get encoded to UTF-8 automatically
(e.g., b"caf\xc3\xa9" ). Alternatively, you can represent Unicode strings using
tf.int32
tensors of type , where each item represents a Unicode code point (e.g.,
[99, 97, 102, 233]). tf.strings s)
The package (with an contains ops for byte
strings and Unicode strings (and to convert one into the other). It’s important to
tf.string
note that a is atomic, meaning that its length does not appear in the
tensor’s shape. Once you convert it to a Unicode tensor (i.e., a tensor of type
tf.int32 holding Unicode code points), the length appears in the shape.
<i>Sets</i>
Are represented as regular tensors (or sparse tensors). For example, tf.con
stant([[1, 2], [3, 4]]) represents the two sets {1, 2} and {3, 4}. More gener‐
ally, each set is represented by a vector in the tensor’s last axis. You can
manipulate sets using operations from the tf.sets package.
<i>Queues</i>
Store tensors across multiple steps. TensorFlow offers various kinds of queues:
simple First In, First Out (FIFO) queues (FIFOQueue), queues that can prioritize