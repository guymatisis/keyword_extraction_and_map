TensorFlow’s Data API, which makes it easy to load and preprocess data efficiently.
For this reason, we will use tf.keras in this book. However, in this chapter we will not
use any of the TensorFlow-specific features, so the code should run fine on other
Keras implementations as well (at least in Python), with only minor modifications,
such as changing the imports.
<i>Figure</i> <i>10-10.</i> <i>Two</i> <i>implementations</i> <i>of</i> <i>the</i> <i>Keras</i> <i>API:</i> <i>multibackend</i> <i>Keras</i> <i>(left)</i> <i>and</i>
<i>tf.keras</i> <i>(right)</i>
The most popular Deep Learning library, after Keras and TensorFlow, is Facebook’s
PyTorch library. The good news is that its API is quite similar to Keras’s (in part
because both APIs were inspired by Scikit-Learn and Chainer), so once you know
Keras, it is not difficult to switch to PyTorch, if you ever want to. PyTorch’s popularity
grew exponentially in 2018, largely thanks to its simplicity and excellent documenta‐
tion, which were not TensorFlow 1.x’s main strengths. However, TensorFlow 2 is
arguably just as simple as PyTorch, as it has adopted Keras as its official high-level
API and its developers have greatly simplified and cleaned up the rest of the API. The
documentation has also been completely reorganized, and it is much easier to find
what you need now. Similarly, PyTorch’s main weaknesses (e.g., limited portability
and no computation graph analysis) have been largely addressed in PyTorch 1.0.
Healthy competition is beneficial to everyone.
All right, it’s time to code! As tf.keras is bundled with TensorFlow, let’s start by instal‐
ling TensorFlow.
<header><largefont><b>Installing</b></largefont> <largefont><b>TensorFlow</b></largefont> <largefont><b>2</b></largefont></header>
Assuming you installed Jupyter and Scikit-Learn by following the installation instruc‐
tions in Chapter 2, use pip to install TensorFlow. If you created an isolated environ‐
ment using virtualenv, you first need to activate it: