That’s all! This will create a ResNet-50 model and download weights pretrained on
the ImageNet dataset. To use it, you first need to ensure that the images have the right
size. A ResNet-50 model expects 224 × 224-pixel images (other models may expect
other sizes, such as 299 × 299), so let’s use TensorFlow’s tf.image.resize() function
to resize the images we loaded earlier:
images_resized = tf.image.resize(images, [224, 224])
The tf.image.resize() will not preserve the aspect ratio. If this is
a problem, try cropping the images to the appropriate aspect ratio
before resizing. Both operations can be done in one shot with
tf.image.crop_and_resize() .
The pretrained models assume that the images are preprocessed in a specific way. In
some cases they may expect the inputs to be scaled from 0 to 1, or –1 to 1, and so on.
preprocess_input()
Each model provides a function that you can use to preprocess
your images. These functions assume that the pixel values range from 0 to 255, so we
must multiply them by 255 (since earlier we scaled them to the 0–1 range):
inputs = keras.applications.resnet50.preprocess_input(images_resized * 255)
Now we can use the pretrained model to make predictions:
Y_proba = model.predict(inputs)
As usual, the output Y_proba is a matrix with one row per image and one column per
class (in this case, there are 1,000 classes). If you want to display the top <i>K</i> predic‐
tions, including the class name and the estimated probability of each predicted class,
use the decode_predictions() function. For each image, it returns an array contain‐
ing the top <i>K</i> predictions, where each prediction is represented as an array containing
identifier,23
the class its name, and the corresponding confidence score:
top_K = keras.applications.resnet50.decode_predictions(Y_proba, top=3)
<b>for</b> image_index <b>in</b> range(len(images)):
<b>print("Image</b> #{}".format(image_index))
<b>for</b> class_id, name, y_proba <b>in</b> top_K[image_index]:
<b>print("</b> {} - {:12s} {:.2f}%".format(class_id, name, y_proba * 100))
<b>print()</b>
The output looks like this:
Image #0
n03877845 - palace 42.87%
n02825657 - bell_cote 40.57%
n03781244 - monastery 14.56%
23 IntheImageNetdataset,eachimageisassociatedtoawordintheWordNetdataset:theclassIDisjusta
WordNetID.