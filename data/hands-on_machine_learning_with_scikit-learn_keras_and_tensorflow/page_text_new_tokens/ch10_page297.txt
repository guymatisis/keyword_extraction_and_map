$ <b>cd</b> <b>$ML_PATH</b> # Your ML working directory (e.g., $HOME/ml)
$ <b>source</b> <b>my_env/bin/activate</b> # on Linux or macOS
$ <b>.\my_env\Scripts\activate</b> # on Windows
Next, install TensorFlow 2 (if you are not using a virtualenv, you will need adminis‐
trator rights, or to add the --user option):
$ <b>python3</b> <b>-m</b> <b>pip</b> <b>install</b> <b>-U</b> <b>tensorflow</b>
For GPU support, at the time of this writing you need to install
tensorflow-gpu tensorflow
instead of , but the TensorFlow team
is working on having a single library that will support both CPU-
only and GPU-equipped systems. You will still need to install extra
libraries for GPU support (see <i>https://tensorflow.org/install</i> for
more details). We will look at GPUs in more depth in Chapter 19.
To test your installation, open a Python shell or a Jupyter notebook, then import
TensorFlow and tf.keras and print their versions:
<b>>>></b> <b>import</b> <b>tensorflow</b> <b>as</b> <b>tf</b>
<b>>>></b> <b>from</b> <b>tensorflow</b> <b>import</b> keras
<b>>>></b> tf.__version__
'2.0.0'
<b>>>></b> keras.__version__
'2.2.4-tf'
The second version is the version of the Keras API implemented by tf.keras. Note that
it ends with -tf , highlighting the fact that tf.keras implements the Keras API, plus
some extra TensorFlow-specific features.
Now let’s use tf.keras! We’ll start by building a simple image classifier.
<header><largefont><b>Building</b></largefont> <largefont><b>an</b></largefont> <largefont><b>Image</b></largefont> <largefont><b>Classifier</b></largefont> <largefont><b>Using</b></largefont> <largefont><b>the</b></largefont> <largefont><b>Sequential</b></largefont> <largefont><b>API</b></largefont></header>
First, we need to load a dataset. In this chapter we will tackle Fashion MNIST, which
is a drop-in replacement of MNIST (introduced in Chapter 3). It has the exact same
format as MNIST (70,000 grayscale images of 28 × 28 pixels each, with 10 classes),
but the images represent fashion items rather than handwritten digits, so each class is
more diverse, and the problem turns out to be significantly more challenging than
MNIST. For example, a simple linear model reaches about 92% accuracy on MNIST,
but only about 83% on Fashion MNIST.
<b>UsingKerastoloadthedataset</b>
Keras provides some utility functions to fetch and load common datasets, including
MNIST, Fashion MNIST, and the California housing dataset we used in Chapter 2.
Let’s load Fashion MNIST: