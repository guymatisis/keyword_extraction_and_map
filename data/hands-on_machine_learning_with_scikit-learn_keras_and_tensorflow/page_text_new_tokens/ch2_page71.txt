<b>from</b> <b>sklearn.compose</b> <b>import</b> ColumnTransformer
num_attribs = list(housing_num)
cat_attribs = ["ocean_proximity"]
full_pipeline = ColumnTransformer([
("num", num_pipeline, num_attribs),
("cat", OneHotEncoder(), cat_attribs),
])
housing_prepared = full_pipeline.fit_transform(housing)
First we import the ColumnTransformer class, next we get the list of numerical col‐
Colum
umn names and the list of categorical column names, and then we construct a
nTransformer . The constructor requires a list of tuples, where each tuple contains a
name,22 a transformer, and a list of names (or indices) of columns that the trans‐
former should be applied to. In this example, we specify that the numerical columns
num_pipeline
should be transformed using the that we defined earlier, and the cate‐
gorical columns should be transformed using a OneHotEncoder. Finally, we apply this
ColumnTransformer
to the housing data: it applies each transformer to the appropri‐
ate columns and concatenates the outputs along the second axis (the transformers
must return the same number of rows).
Note that the OneHotEncoder returns a sparse matrix, while the num_pipeline returns
Colum
a dense matrix. When there is such a mix of sparse and dense matrices, the
nTransformer estimates the density of the final matrix (i.e., the ratio of nonzero
cells), and it returns a sparse matrix if the density is lower than a given threshold (by
sparse_threshold=0.3
default, ). In this example, it returns a dense matrix. And
that’s it! We have a preprocessing pipeline that takes the full housing data and applies
the appropriate transformations to each column.
"drop"
Instead of using a transformer, you can specify the string if
"pass
you want the columns to be dropped, or you can specify
through"
if you want the columns to be left untouched. By default,
the remaining columns (i.e., the ones that were not listed) will be
dropped, but you can set the remainder hyperparameter to any
transformer (or to "passthrough" ) if you want these columns to be
handled differently.
If you are using Scikit-Learn 0.19 or earlier, you can use a third-party library such as
sklearn-pandas,
or you can roll out your own custom transformer to get the same
ColumnTransformer FeatureUnion
functionality as the . Alternatively, you can use the
22 Justlikeforpipelines,thenamecanbeanythingaslongasitdoesnotcontaindoubleunderscores.