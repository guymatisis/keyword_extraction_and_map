<b>class</b> <b>MyDense(keras.layers.Layer):</b>
<b>def</b> <b>__init__(self,</b> units, activation=None, **kwargs):
super().__init__(**kwargs)
self.units = units
self.activation = keras.activations.get(activation)
<b>def</b> build(self, batch_input_shape):
self.kernel = self.add_weight(
name="kernel", shape=[batch_input_shape[-1], self.units],
initializer="glorot_normal")
self.bias = self.add_weight(
name="bias", shape=[self.units], initializer="zeros")
super().build(batch_input_shape) <i>#</i> <i>must</i> <i>be</i> <i>at</i> <i>the</i> <i>end</i>
<b>def</b> call(self, X):
<b>return</b> self.activation(X @ self.kernel + self.bias)
<b>def</b> compute_output_shape(self, batch_input_shape):
<b>return</b> tf.TensorShape(batch_input_shape.as_list()[:-1] + [self.units])
<b>def</b> get_config(self):
base_config = super().get_config()
<b>return</b> {**base_config, "units": self.units,
"activation": keras.activations.serialize(self.activation)}
Let’s walk through this code:
• The constructor takes all the hyperparameters as arguments (in this example,
units and activation ), and importantly it also takes a **kwargs argument. It
kwargs
calls the parent constructor, passing it the : this takes care of standard
input_shape, trainable, name.
arguments such as and Then it saves the hyper‐
parameters as attributes, converting the activation argument to the appropriate
keras.activations.get()
activation function using the function (it accepts
functions, standard strings like "relu" or "selu" , or simply None ).8
build()
• The method’s role is to create the layer’s variables by calling the
add_weight() method for each weight. The build() method is called the first
time the layer is used. At that point, Keras will know the shape of this layer’s
build()
inputs, and it will pass it to the method,9 which is often necessary to cre‐
ate some of the weights. For example, we need to know the number of neurons in
the previous layer in order to create the connection weights matrix (i.e., the
"kernel"
): this corresponds to the size of the last dimension of the inputs. At the
end of the build() method (and only at the end), you must call the parent’s
keras.layers.Activation
8 Thisfunctionisspecifictotf.keras.Youcoulduse instead.
9 TheKerasAPIcallsthisargumentinput_shape,butsinceitalsoincludesthebatchdimension,Iprefertocall
batch_input_shape compute_output_shape()
it .Samefor .