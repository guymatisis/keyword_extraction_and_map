<header><largefont><b>Chaining</b></largefont> <largefont><b>Transformations</b></largefont></header>
Once you have a dataset, you can apply all sorts of transformations to it by calling its
transformation methods. Each method returns a new dataset, so you can chain trans‐
formations like this (this chain is illustrated in Figure 13-1):
<b>>>></b> dataset = dataset.repeat(3).batch(7)
<b>>>></b> <b>for</b> item <b>in</b> dataset:
<b>...</b> <b>print(item)</b>
<b>...</b>
tf.Tensor([0 1 2 3 4 5 6], shape=(7,), dtype=int32)
tf.Tensor([7 8 9 0 1 2 3], shape=(7,), dtype=int32)
tf.Tensor([4 5 6 7 8 9 0], shape=(7,), dtype=int32)
tf.Tensor([1 2 3 4 5 6 7], shape=(7,), dtype=int32)
tf.Tensor([8 9], shape=(2,), dtype=int32)
<i>Figure</i> <i>13-1.</i> <i>Chaining</i> <i>dataset</i> <i>transformations</i>
repeat()
In this example, we first call the method on the original dataset, and it
returns a new dataset that will repeat the items of the original dataset three times. Of
course, this will not copy all the data in memory three times! (If you call this method
with no arguments, the new dataset will repeat the source dataset forever, so the code
that iterates over the dataset will have to decide when to stop.) Then we call the
batch()
method on this new dataset, and again this creates a new dataset. This one
will group the items of the previous dataset in batches of seven items. Finally, we iter‐
batch()
ate over the items of this final dataset. As you can see, the method had to
drop_remain
output a final batch of size two instead of seven, but you can call it with
der=True if you want it to drop this final batch so that all batches have the exact same
size.