                                                                      
                                                                      
                                                                      
                                                                      
                                                                      
                                                                      
                                                                      
                                                                      
                                                                      
                                                                      
                                                                      
                                                                      
                                                                      
                                                                      
                                                                      
                                                                      
                                                                      
                                                                      
                                                                      
          Figure 4-12. Generated nonlinear and noisy dataset          
                                                                      
          Clearly, a straight line will never fit this data properly. So letâ€™s use Scikit-Learnâ€™s Poly
          nomialFeatures class to transform our training data, adding the square (second-
          degree polynomial) of each feature in the training set as a new feature (in this case
          there is just one feature):                                 
            >>> from sklearn.preprocessing import PolynomialFeatures  
            >>> poly_features = PolynomialFeatures(degree=2, include_bias=False)
            >>> X_poly = poly_features.fit_transform(X)               
            >>> X[0]                                                  
            array([-0.75275929])                                      
            >>> X_poly[0]                                             
            array([-0.75275929, 0.56664654])                          
          X_poly now contains the original feature of X plus the square of this feature. Now you
          can fit a LinearRegression model to this extended training data (Figure 4-13):
            >>> lin_reg = LinearRegression()                          
            >>> lin_reg.fit(X_poly, y)                                
            >>> lin_reg.intercept_, lin_reg.coef_                     
            (array([1.78134581]), array([[0.93366893, 0.56456263]]))  
                                                                      
                                                                      
                                                                      
                                                                      
                                                                      
                                                                      
                                                                      
                                                                      