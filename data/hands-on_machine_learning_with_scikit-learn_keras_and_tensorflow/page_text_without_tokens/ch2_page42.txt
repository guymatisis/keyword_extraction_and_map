                                                                      
                                                                      
                                                                      
                                                                      
          Check the Assumptions                                       
                                                                      
          Lastly, it is good practice to list and verify the assumptions that have been made so far
          (by you or others); this can help you catch serious issues early on. For example, the
          district prices that your system outputs are going to be fed into a downstream
          Machine Learning system, and you assume that these prices are going to be used as
          such. But what if the downstream system converts the prices into categories (e.g.,
          “cheap,” “medium,” or “expensive”) and then uses those categories instead of the pri‐
          ces themselves? In this case, getting the price perfectly right is not important at all;
          your system just needs to get the category right. If that’s so, then the problem should
          have been framed as a classification task, not a regression task. You don’t want to find
          this out after working on a regression system for months.   
          Fortunately, after talking with the team in charge of the downstream system, you are
          confident that they do indeed need the actual prices, not just categories. Great! You’re
          all set, the lights are green, and you can start coding now!
                                                                      
          Get the Data                                                
                                                                      
          It’s time to get your hands dirty. Don’t hesitate to pick up your laptop and walk
          through the following code examples in a Jupyter notebook. The full Jupyter note‐
          book is available at https://github.com/ageron/handson-ml2. 
          Create the Workspace                                        
                                                                      
          First you will need to have Python installed. It is probably already installed on your
          system. If not, you can get it at https://www.python.org/.5 
                                                                      
          Next you need to create a workspace directory for your Machine Learning code and
          datasets. Open a terminal and type the following commands (after the $ prompts):
            $ export ML_PATH="$HOME/ml" # You can change the path if you prefer
            $ mkdir -p $ML_PATH                                       
          You will need a number of Python modules: Jupyter, NumPy, pandas, Matplotlib, and
          Scikit-Learn. If you already have Jupyter running with all these modules installed,
          you can safely skip to “Download the Data” on page 46. If you don’t have them yet,
          there are many ways to install them (and their dependencies). You can use your
          system’s packaging system (e.g., apt-get on Ubuntu, or MacPorts or Homebrew on
          macOS), install a Scientific Python distribution such as Anaconda and use its packag‐
          ing system, or just use Python’s own packaging system, pip, which is included by
                                                                      
                                                                      
                                                                      
          5 The latest version of Python 3 is recommended. Python 2.7+ may work too, but now that it’s deprecated, all
           major scientific libraries are dropping support for it, so you should migrate to Python 3 as soon as possible.