                                                                      
                                                                      
                                                                      
                                                                      
                   In practice you will rarely have to create variables manually, since
                   Keras provides an add_weight() method that will take care of it for
                   you, as we will see. Moreover, model parameters will generally be
                   updated directly by the optimizers, so you will rarely need to
                   update variables manually.                         
                                                                      
          Other Data Structures                                       
                                                                      
          TensorFlow supports several other data structures, including the following (please see
          the “Tensors and Operations” section in the notebook or Appendix F for more
          details):                                                   
          Sparse tensors (tf.SparseTensor)                            
            Efficiently represent tensors containing mostly zeros. The tf.sparse package
            contains operations for sparse tensors.                   
                                                                      
          Tensor arrays (tf.TensorArray)                              
            Are lists of tensors. They have a fixed size by default but can optionally be made
            dynamic. All tensors they contain must have the same shape and data type.
          Ragged tensors (tf.RaggedTensor)                            
            Represent static lists of lists of tensors, where every tensor has the same shape
            and data type. The tf.ragged package contains operations for ragged tensors.
                                                                      
          String tensors                                              
            Are regular tensors of type tf.string. These represent byte strings, not Unicode
            strings, so if you create a string tensor using a Unicode string (e.g., a regular
            Python 3 string like "café"), then it will get encoded to UTF-8 automatically
            (e.g., b"caf\xc3\xa9"). Alternatively, you can represent Unicode strings using
            tensors of type tf.int32, where each item represents a Unicode code point (e.g.,
            [99, 97, 102, 233]). The tf.strings package (with an s) contains ops for byte
            strings and Unicode strings (and to convert one into the other). It’s important to
            note that a tf.string is atomic, meaning that its length does not appear in the
            tensor’s shape. Once you convert it to a Unicode tensor (i.e., a tensor of type
            tf.int32 holding Unicode code points), the length appears in the shape.
          Sets                                                        
            Are represented as regular tensors (or sparse tensors). For example, tf.con
            stant([[1, 2], [3, 4]]) represents the two sets {1, 2} and {3, 4}. More gener‐
            ally, each set is represented by a vector in the tensor’s last axis. You can
            manipulate sets using operations from the tf.sets package.
                                                                      
          Queues                                                      
            Store tensors across multiple steps. TensorFlow offers various kinds of queues:
            simple First In, First Out (FIFO) queues (FIFOQueue), queues that can prioritize