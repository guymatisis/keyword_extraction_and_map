                                                                      
                                                                      
                                                                      
                                                                      
            >>> env.observation_spec()                                
            BoundedArraySpec(shape=(210, 160, 3), dtype=dtype('float32'), name=None,
                      minimum=[[[0. 0. 0.], [0. 0. 0.],...]],         
                      maximum=[[[255., 255., 255.], [255., 255., 255.], ...]])
            >>> env.action_spec()                                     
            BoundedArraySpec(shape=(), dtype=dtype('int64'), name=None,
                      minimum=0, maximum=3)                           
            >>> env.time_step_spec()                                  
            TimeStep(step_type=ArraySpec(shape=(), dtype=dtype('int32'), name='step_type'),
                  reward=ArraySpec(shape=(), dtype=dtype('float32'), name='reward'),
                  discount=BoundedArraySpec(shape=(), ..., minimum=0.0, maximum=1.0),
                  observation=BoundedArraySpec(shape=(210, 160, 3), ...))
          As you can see, the observations are simply screenshots of the Atari screen, repre‐
          sented as NumPy arrays of shape [210, 160, 3]. To render an environment, you can
          call env.render(mode="human"), and if you want to get back the image in the form of
          a NumPy array, just call env.render(mode="rgb_array") (unlike in OpenAI Gym,
          this is the default mode).                                  
          There are four actions available. Gym’s Atari environments have an extra method that
          you can call to know what each action corresponds to:       
            >>> env.gym.get_action_meanings()                         
            ['NOOP', 'FIRE', 'RIGHT', 'LEFT']                         
                   Specs can be instances of a specification class, nested lists, or dic‐
                   tionaries of specs. If the specification is nested, then the specified
                   object must match the specification’s nested structure. For example,
                   if the observation spec is {"sensors": ArraySpec(shape=[2]),
                   "camera": ArraySpec(shape=[100, 100])}, then a valid observa‐
                   tion would be {"sensors": np.array([1.5, 3.5]), "camera":
                   np.array(...)}. The tf.nest package provides tools to handle
                   such nested structures (a.k.a. nests).             
          The observations are quite large, so we will downsample them and also convert them
          to grayscale. This will speed up training and use less RAM. For this, we can use an
          environment wrapper.                                        
                                                                      
          Environment Wrappers and Atari Preprocessing                
                                                                      
          TF-Agents provides several environment wrappers in the tf_agents.environ
          ments.wrappers package. As their name suggests, they wrap an environment, for‐
          warding every call to it, but also adding some extra functionality. Here are some of
          the available wrappers:                                     
          ActionClipWrapper                                           
            Clips the actions to the action spec.                     
                                                                      