                                                                      
                                                                      
                                                                      
                                                                      
          That’s all! This will create a ResNet-50 model and download weights pretrained on
          the ImageNet dataset. To use it, you first need to ensure that the images have the right
          size. A ResNet-50 model expects 224 × 224-pixel images (other models may expect
          other sizes, such as 299 × 299), so let’s use TensorFlow’s tf.image.resize() function
          to resize the images we loaded earlier:                     
                                                                      
            images_resized = tf.image.resize(images, [224, 224])      
                                                                      
                   The tf.image.resize() will not preserve the aspect ratio. If this is
                   a problem, try cropping the images to the appropriate aspect ratio
                   before resizing. Both operations can be done in one shot with
                   tf.image.crop_and_resize().                        
                                                                      
          The pretrained models assume that the images are preprocessed in a specific way. In
          some cases they may expect the inputs to be scaled from 0 to 1, or –1 to 1, and so on.
          Each model provides a preprocess_input() function that you can use to preprocess
          your images. These functions assume that the pixel values range from 0 to 255, so we
          must multiply them by 255 (since earlier we scaled them to the 0–1 range):
            inputs = keras.applications.resnet50.preprocess_input(images_resized * 255)
          Now we can use the pretrained model to make predictions:    
                                                                      
            Y_proba = model.predict(inputs)                           
          As usual, the output Y_proba is a matrix with one row per image and one column per
          class (in this case, there are 1,000 classes). If you want to display the top K predic‐
          tions, including the class name and the estimated probability of each predicted class,
          use the decode_predictions() function. For each image, it returns an array contain‐
          ing the top K predictions, where each prediction is represented as an array containing
          the class identifier,23 its name, and the corresponding confidence score:
            top_K = keras.applications.resnet50.decode_predictions(Y_proba, top=3)
            for image_index in range(len(images)):                    
               print("Image #{}".format(image_index))                 
               for class_id, name, y_proba in top_K[image_index]:     
                 print(" {} - {:12s} {:.2f}%".format(class_id, name, y_proba * 100))
               print()                                                
          The output looks like this:                                 
            Image #0                                                  
             n03877845 - palace 42.87%                                
             n02825657 - bell_cote 40.57%                             
             n03781244 - monastery 14.56%                             
                                                                      
          23 In the ImageNet dataset, each image is associated to a word in the WordNet dataset: the class ID is just a
           WordNet ID.                                                