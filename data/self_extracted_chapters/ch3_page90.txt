                                                                      
                                                                      
                                                                      
                                                                      
            from sklearn.base import BaseEstimator                    
                                                                      
            class Never5Classifier(BaseEstimator):                    
               def fit(self, X, y=None):                              
                 return self                                          
               def predict(self, X):                                  
                 return np.zeros((len(X), 1), dtype=bool)             
          Can you guess this model’s accuracy? Let’s find out:        
            >>> never_5_clf = Never5Classifier()                      
            >>> cross_val_score(never_5_clf, X_train, y_train_5, cv=3, scoring="accuracy")
            array([0.91125, 0.90855, 0.90915])                        
          That’s right, it has over 90% accuracy! This is simply because only about 10% of the
          images are 5s, so if you always guess that an image is not a 5, you will be right about
          90% of the time. Beats Nostradamus.                         
          This demonstrates why accuracy is generally not the preferred performance measure
          for classifiers, especially when you are dealing with skewed datasets (i.e., when some
          classes are much more frequent than others).                
                                                                      
          Confusion Matrix                                            
          A much better way to evaluate the performance of a classifier is to look at the confu‐
          sion matrix. The general idea is to count the number of times instances of class A are
          classified as class B. For example, to know the number of times the classifier confused
          images of 5s with 3s, you would look in the fifth row and third column of the confu‐
          sion matrix.                                                
                                                                      
          To compute the confusion matrix, you first need to have a set of predictions so that
          they can be compared to the actual targets. You could make predictions on the test
          set, but let’s keep it untouched for now (remember that you want to use the test set
          only at the very end of your project, once you have a classifier that you are ready to
          launch). Instead, you can use the cross_val_predict() function:
            from sklearn.model_selection import cross_val_predict     
            y_train_pred = cross_val_predict(sgd_clf, X_train, y_train_5, cv=3)
                                                                      
          Just like the cross_val_score() function, cross_val_predict() performs K-fold
          cross-validation, but instead of returning the evaluation scores, it returns the predic‐
          tions made on each test fold. This means that you get a clean prediction for each
          instance in the training set (“clean” meaning that the prediction is made by a model
          that never saw the data during training).                   
          Now you are ready to get the confusion matrix using the confusion_matrix() func‐
          tion. Just pass it the target classes (y_train_5) and the predicted classes
          (y_train_pred):                                             
                                                                      