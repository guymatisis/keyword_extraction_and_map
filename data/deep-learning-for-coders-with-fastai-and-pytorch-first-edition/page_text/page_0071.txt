The <i>independent</i> <i>variable</i> is the thing we are using to make predictions from, and the
<i>dependent</i> <i>variable</i> is our target. In this case, our independent variable is a set of
images, and our dependent variables are the categories (type of bear) for each image.
We will see many other types of block in the rest of this book.
For this DataLoaders, our underlying items will be file paths. We have to tell fastai
how to get a list of those files. The get_image_files function takes a path, and
returns a list of all of the images in that path (recursively, by default):
get_items=get_image_files
Often, datasets that you download will already have a validation set defined. Some‐
times this is done by placing the images for the training and validation sets into dif‐
ferent folders. Sometimes it is done by providing a CSV file in which each filename is
listed along with which dataset it should be in. There are many ways that this can be
done, and fastai provides a general approach that allows you to use one of its prede‐
fined classes for this or to write your own.
In this case, we want to split our training and validation sets randomly. However, we
would like to have the same training/validation split each time we run this notebook,
so we fix the random seed (computers don’t really know how to create random num‐
bers at all, but simply create lists of numbers that look random; if you provide the
same starting point for that list each time—called the <i>seed—then</i> you will get the
exact same list each time).
splitter=RandomSplitter(valid_pct=0.2, seed=42)
The independent variable is often referred to as x, and the dependent variable is often
referred to as y. Here, we are telling fastai what function to call to create the labels in
our dataset:
get_y=parent_label
parent_label is a function provided by fastai that simply gets the name of the folder
a file is in. Because we put each of our bear images into folders based on the type of
bear, this is going to give us the labels that we need.
Our images are all different sizes, and this is a problem for deep learning: we don’t
feed the model one image at a time but several of them (what we call a <i>mini-batch).</i> To
group them in a big array (usually called a <i>tensor)</i> that is going to go through our
model, they all need to be of the same size. So, we need to add a transform that will
resize these images to the same size. <i>Item</i> <i>transforms</i> are pieces of code that run on
each individual item, whether it be an image, category, or so forth. fastai includes
many predefined transforms; we use the Resize transform here and specify a size of
128 pixels:
item_tfms=Resize(128)