<i>Figure</i> <i>8-1.</i> <i>Crosstab</i> <i>of</i> <i>movies</i> <i>and</i> <i>users</i>
We have selected just a few of the most popular movies, and users who watch the
most movies, for this crosstab example. The empty cells in this table are the things
that we would like our model to learn to fill in. Those are the places where a user has
not reviewed the movie yet, presumably because they have not watched it. For each
user, we would like to figure out which of those movies they might be most likely to
enjoy.
If we knew for each user to what degree they liked each important category that a
movie might fall into, such as genre, age, preferred directors and actors, and so forth,
and we knew the same information about each movie, then a simple way to fill in this
table would be to multiply this information together for each movie and use a combi‐
nation. For instance, assuming these factors range between –1 and +1, with positive
numbers indicating stronger matches and negative numbers weaker ones, and the
categories are science-fiction, action, and old movies, then we could represent the
movie <i>The</i> <i>Last</i> <i>Skywalker</i> as follows:
last_skywalker = np.array([0.98,0.9,-0.9])
Here, for instance, we are scoring <i>very</i> <i>science-fiction</i> as 0.98, and <i>very</i> <i>not</i> <i>old</i> as –0.9.
We could represent a user who likes modern sci-fi action movies as follows:
user1 = np.array([0.9,0.8,-0.6])
We can now calculate the match between this combination:
(user1*last_skywalker).sum()
2.1420000000000003