<header><largefont><b>CHAPTER</b></largefont> <largefont><b>2</b></largefont></header>
<header><largefont><b>From</b></largefont> <largefont><b>Model</b></largefont> <largefont><b>to</b></largefont> <largefont><b>Production</b></largefont></header>
The six lines of code we saw in Chapter 1 are just one small part of the process of
using deep learning in practice. In this chapter, we’re going to use a computer vision
example to look at the end-to-end process of creating a deep learning application.
More specifically, we’re going to build a bear classifier! In the process, we’ll discuss
the capabilities and constraints of deep learning, explore how to create datasets, look
at possible gotchas when using deep learning in practice, and more. Many of the key
points will apply equally well to other deep learning problems, such as those in Chap‐
ter 1. If you work through a problem similar in key respects to our example problems,
we expect you to get excellent results with little code, quickly.
Let’s start with how you should frame your problem.
<header><largefont><b>The</b></largefont> <largefont><b>Practice</b></largefont> <largefont><b>of</b></largefont> <largefont><b>Deep</b></largefont> <largefont><b>Learning</b></largefont></header>
We’ve seen that deep learning can solve a lot of challenging problems quickly and
with little code. As a beginner, there’s a sweet spot of problems that are similar
enough to our example problems that you can very quickly get extremely useful
results. However, deep learning isn’t magic! The same six lines of code won’t work for
every problem anyone can think of today.
Underestimating the constraints and overestimating the capabilities of deep learning
may lead to frustratingly poor results, at least until you gain some experience and can
solve the problems that arise. Conversely, overestimating the constraints and under‐
estimating the capabilities of deep learning may mean you do not attempt a solvable
problem because you talk yourself out of it.
We often talk to people who underestimate both the constraints and the capabilities
of deep learning. Both of these can be problems: underestimating the capabilities
means that you might not even try things that could be very beneficial, and underes‐