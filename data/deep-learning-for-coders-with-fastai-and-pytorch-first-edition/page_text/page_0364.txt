<header><largefont><b>Applying</b></largefont> <largefont><b>the</b></largefont> <largefont><b>Mid-Level</b></largefont> <largefont><b>Data</b></largefont> <largefont><b>API:</b></largefont> <largefont><b>SiamesePair</b></largefont></header>
A <i>Siamese</i> <i>model</i> takes two images and has to determine whether they are of the same
class. For this example, we will use the Pet dataset again and prepare the data for a
model that will have to predict whether two images of pets are of the same breed. We
will explain here how to prepare the data for such a model, and then we will train that
model in Chapter 15.
First things first—let’s get the images in our dataset:
<b>from</b> <b>fastai.vision.all</b> <b>import</b> *
path = untar_data(URLs.PETS)
files = get_image_files(path/"images")
If we didn’t care about showing our objects at all, we could directly create one trans‐
form to completely preprocess that list of files. We will want to look at those images,
show
though, so we need to create a custom type. When you call the method on a
TfmdLists or a Datasets object, it will decode items until it reaches a type that con‐
tains a show method and use it to show the object. That show method gets passed a
ctx , which could be a matplotlib axis for images or a row of a DataFrame for texts.
Here we create a SiameseImage object that subclasses Tuple and is intended to con‐
True
tain three things: two images, and a Boolean that’s if the images are of the same
breed. We also implement the special show method, such that it concatenates the two
images with a black line in the middle. Don’t worry too much about the part that is in
if SiameseImage
the test (which is to show the when the images are Python images,
not tensors); the important part is in the last three lines:
<b>class</b> <b>SiameseImage(Tuple):</b>
<b>def</b> show(self, ctx=None, **kwargs):
img1,img2,same_breed = self
<b>if</b> <b>not</b> isinstance(img1, Tensor):
<b>if</b> img2.size != img1.size: img2 = img2.resize(img1.size)
t1,t2 = tensor(img1),tensor(img2)
t1,t2 = t1.permute(2,0,1),t2.permute(2,0,1)
<b>else:</b> t1,t2 = img1,img2
line = t1.new_zeros(t1.shape[0], t1.shape[1], 10)
<b>return</b> show_image(torch.cat([t1,line,t2], dim=2),
title=same_breed, ctx=ctx)