speed up again as it went downhill. You want to build a model of how the speed
changes over time. If you were measuring the speed manually every second for 20
seconds, it might look something like this:
time = torch.arange(0,20).float(); time
tensor([ 0., 1., 2., 3., 4., 5., 6., 7., 8., 9., 10., 11., 12., 13.,
> 14., 15., 16., 17., 18., 19.])
speed = torch.randn(20)*3 + 0.75*(time-9.5)**2 + 1
plt.scatter(time,speed);
We’ve added a bit of random noise, since measuring things manually isn’t precise.
This means it’s not that easy to answer the question: what was the roller coaster’s
speed? Using SGD, we can try to find a function that matches our observations. We
can’t consider every possible function, so let’s use a guess that it will be quadratic;
a*(time**2)+(b*time)+c.
i.e., a function of the form
We want to distinguish clearly between the function’s input (the time when we are
measuring the coaster’s speed) and its parameters (the values that define <i>which</i> quad‐
ratic we’re trying). So let’s collect the parameters in one argument and thus separate
t, params,
the input, and the parameters, in the function’s signature:
<b>def</b> f(t, params):
a,b,c = params
<b>return</b> a*(t**2) + (b*t) + c
In other words, we’ve restricted the problem of finding the best imaginable function
that fits the data to finding the best <i>quadratic</i> function. This greatly simplifies the
a, b,
problem, since every quadratic function is fully defined by the three parameters
and c . Thus, to find the best quadratic function, we need to find only the best values
for a, b, and c.
If we can solve this problem for the three parameters of a quadratic function, we’ll be
able to apply the same approach for other, more complex functions with more