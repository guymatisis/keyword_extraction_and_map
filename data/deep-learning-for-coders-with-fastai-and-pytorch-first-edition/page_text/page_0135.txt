We can see what’s in this directory by using ls , a method added by fastai. This
method returns an object of a special fastai class called L, which has all the same func‐
tionality of Python’s built-in list, plus a lot more. One of its handy features is that,
when printed, it displays the count of items before listing the items themselves (if
there are more than 10 items, it shows just the first few):
path.ls()
(#9) [Path('cleaned.csv'),Path('item_list.txt'),Path('trained_model.pkl'),Path('
> models'),Path('valid'),Path('labels.csv'),Path('export.pkl'),Path('history.cs
> v'),Path('train')]
The MNIST dataset follows a common layout for machine learning datasets: separate
folders for the training set and the validation (and/or test) set. Let’s see what’s inside
the training set:
(path/'train').ls()
(#2) [Path('train/7'),Path('train/3')]
There’s a folder of 3s, and a folder of 7s. In machine learning parlance, we say that “3”
and “7” are the <i>labels</i> (or targets) in this dataset. Let’s take a look in one of these fold‐
ers (using sorted to ensure we all get the same order of files):
threes = (path/'train'/'3').ls().sorted()
sevens = (path/'train'/'7').ls().sorted()
threes
(#6131) [Path('train/3/10.png'),Path('train/3/10000.png'),Path('train/3/10011.pn
> g'),Path('train/3/10031.png'),Path('train/3/10034.png'),Path('train/3/10042.p
> ng'),Path('train/3/10052.png'),Path('train/3/1007.png'),Path('train/3/10074.p
> ng'),Path('train/3/10091.png')...]
As we might expect, it’s full of image files. Let’s take a look at one now. Here’s an
image of a handwritten number 3, taken from the famous MNIST dataset of hand‐
written numbers:
im3_path = threes[1]
im3 = Image.open(im3_path)
im3
Image
Here we are using the class from the <i>Python</i> <i>Imaging</i> <i>Library</i> (PIL), which is the
most widely used Python package for opening, manipulating, and viewing images.
Jupyter knows about PIL images, so it displays the image for us automatically.
In a computer, everything is represented as a number. To view the numbers that make
up this image, we have to convert it to a <i>NumPy</i> <i>array</i> or a <i>PyTorch</i> <i>tensor.</i> For
instance, here’s what a section of the image looks like converted to a NumPy array: