In the end, the performance of the various tokenization approaches is thus generally
best estimated by using the downstream performance of the model as the ultimate
metric. For instance, the good performance of early BPE approaches was demon‐
strated by showing improved performance on machine translation tasks by models
trained using these tokenizers and vocabularies instead of character- or word-based
tokenization.
Let’s see how we can build our own tokenizer optimized for Python code.
<header><largefont><b>A</b></largefont> <largefont><b>Tokenizer</b></largefont> <largefont><b>for</b></largefont> <largefont><b>Python</b></largefont></header>
We need a custom tokenizer for our use case: tokenizing Python code. The question
of pretokenization merits some discussion for programming languages. If we split on
whitespaces and remove them, we will lose all the indentation information, which in
while
Python is important for the semantics of the program (just think about loops,
or if-then-else statements). On the other hand, line breaks are not meaningful and
can be added or removed without impact on the semantics. Similarly, splitting on
punctuation, like an underscore, which is used to compose a single variable name
from several subparts, might not make as much sense as it would in natural language.
Using a natural language pretokenizer for tokenizing code thus seems potentially sub‐
optimal.
Let’s see if there are any tokenizers in the collection provided on the Hub that might
be useful to us. We want a tokenizer that preserves spaces, so a good candidate could
be a byte-level tokenizer like the one from GPT-2. Let’s load this tokenizer and
explore its tokenization properties:
<b>from</b> <b>transformers</b> <b>import</b> AutoTokenizer
python_code = r"""def say_hello():
print("Hello, World!")
# Print it
say_hello()
"""
tokenizer = AutoTokenizer.from_pretrained("gpt2")
<b>print(tokenizer(python_code).tokens())</b>
['def', 'Ġsay', '_', 'hello', '():', 'Ċ', 'Ġ', 'Ġ', 'Ġ', 'Ġprint', '("',
'Hello', ',', 'ĠWorld', '!"', ')', 'Ġ#', 'ĠPrint', 'Ġit', 'Ċ', 'Ċ', 'say', '_',
'hello', '()', 'Ċ']