model_ckpt = 'transformersbook/codeparrot-small'
generation = pipeline('text-generation', model=model_ckpt, device=0)
Now we can use the generation pipeline to generate candidate completions from a
given prompt. By default, the pipeline will generate code until a predefined maximum
length, and the output could contain multiple functions or classes. So, to keep the
outputs concise, we’ll implement a first_block() function that uses regular expres‐
complete_code()
sions to extract the first occurrence of a function or class. The
function below applies this logic to print out the completions generated by
CodeParrot:
<b>import</b> <b>re</b>
<b>from</b> <b>transformers</b> <b>import</b> set_seed
<b>def</b> first_block(string):
<b>return</b> re.split('\nclass|\ndef|\n#|\n@|\nprint|\nif', string)[0].rstrip()
<b>def</b> complete_code(pipe, prompt, max_length=64, num_completions=4, seed=1):
set_seed(seed)
gen_kwargs = {"temperature":0.4, "top_p":0.95, "top_k":0, "num_beams":1,
"do_sample":True,}
code_gens = generation(prompt, num_return_sequences=num_completions,
max_length=max_length, **gen_kwargs)
code_strings = []
<b>for</b> code_gen <b>in</b> code_gens:
generated_code = first_block(code_gen['generated_text'][len(prompt):])
code_strings.append(generated_code)
<b>print(('\n'+'='*80</b> + '\n').join(code_strings))
Let’s start with a simple example and have the model write a function for us that cal‐
culates the area of a rectangle:
prompt = '''def area_of_rectangle(a: float, b: float):
"""Return the area of the rectangle."""'''
complete_code(generation, prompt)
return math.sqrt(a * b)
================================================================================
return a * b / 2.0
================================================================================
return a * b
================================================================================
return a * b / a
That looks pretty good! Although not all the generations are correct, the right solu‐
tion is in there. Now, can the model also solve a more complex task of extracting
URLs from an HTML string? Let’s see: