prompt = '''def get_urls_from_html(html):
"""Get all embedded URLs in a HTML string."""'''
complete_code(generation, prompt)
if not html:
return []
return [url for url in re.findall(r'<a href="(/[^/]+/[^"]+?)">', html)]
================================================================================
return [url for url in re.findall(r'<a href="(.*?)"', html)
if url]
================================================================================
return [url for url in re.findall(r'<a href="(/.*)",', html)]
================================================================================
return re.findall(r'<a href="(.*?)" class="url"[^>]*>', html)
Although it didn’t quite get it right in the second attempt, the other three generations
are correct. We can test the function on the Hugging Face home page:
<b>import</b> <b>requests</b>
<b>def</b> get_urls_from_html(html):
<b>return</b> [url <b>for</b> url <b>in</b> re.findall(r'<a href="(.*?)"', html) <b>if</b> url]
<b>print("</b> | ".join(get_urls_from_html(requests.get('https://hf.co/').text)))
https://github.com/huggingface/transformers | /allenai | /facebook |
/asteroid-team | /google | /amazon | /speechbrain | /microsoft | /grammarly |
/models | /inference-api | /distilbert-base-uncased |
/dbmdz/bert-large-cased-finetuned-conll03-english |
https://huggingface.co/transformers | https://arxiv.org/abs/1811.06031 |
https://arxiv.org/abs/1803.10631 | https://transformer.huggingface.co/ | /coref
| https://medium.com/huggingface/distilbert-8cf3380435b5
https
We can see that all the URLs starting with are external pages, whereas the oth‐
ers are subpages of the main website. That’s exactly what we wanted. Finally, let’s load
the large model and see if we can use it to translate a function from pure Python to
NumPy:
model_ckpt = 'transformersbook/codeparrot'
generation = pipeline('text-generation', model=model_ckpt, device=0)
prompt = '''# a function in native python:
def mean(a):
return sum(a)/len(a)
# the same function using numpy:
import numpy as np
def mean(a):'''
complete_code(generation, prompt, max_length=64)