distilbert_trainer.push_to_hub("Training completed!")
With our model now safely stored on the Hub, we can immediately use it in a pipeline
for our performance benchmark:
finetuned_ckpt = "transformersbook/distilbert-base-uncased-finetuned-clinc"
pipe = pipeline("text-classification", model=finetuned_ckpt)
We can then pass this pipeline to our PerformanceBenchmark class to compute the
metrics associated with this model:
optim_type = "DistilBERT"
pb = PerformanceBenchmark(pipe, clinc["test"], optim_type=optim_type)
perf_metrics.update(pb.run_benchmark())
Model size (MB) - 255.89
Average latency (ms) - 27.53 +\- 0.60
Accuracy on test set - 0.858
To compare these results against our baseline, letâ€™s create a scatter plot of the accuracy
against the latency, with the radius of each point corresponding to the size of the
model on disk. The following function does what we need and marks the current
optimization type as a dashed circle to aid the comparison to previous results:
<b>import</b> <b>pandas</b> <b>as</b> <b>pd</b>
<b>def</b> plot_metrics(perf_metrics, current_optim_type):
df = pd.DataFrame.from_dict(perf_metrics, orient='index')
<b>for</b> idx <b>in</b> df.index:
df_opt = df.loc[idx]
<i>#</i> <i>Add</i> <i>a</i> <i>dashed</i> <i>circle</i> <i>around</i> <i>the</i> <i>current</i> <i>optimization</i> <i>type</i>
<b>if</b> idx == current_optim_type:
plt.scatter(df_opt["time_avg_ms"], df_opt["accuracy"] * 100,
alpha=0.5, s=df_opt["size_mb"], label=idx,
marker='$\u25CC$')
<b>else:</b>
plt.scatter(df_opt["time_avg_ms"], df_opt["accuracy"] * 100,
s=df_opt["size_mb"], label=idx, alpha=0.5)
legend = plt.legend(bbox_to_anchor=(1,1))
<b>for</b> handle <b>in</b> legend.legendHandles:
handle.set_sizes([20])
plt.ylim(80,90)
<i>#</i> <i>Use</i> <i>the</i> <i>slowest</i> <i>model</i> <i>to</i> <i>define</i> <i>the</i> <i>x-axis</i> <i>range</i>
xlim = int(perf_metrics["BERT baseline"]["time_avg_ms"] + 3)
plt.xlim(1, xlim)
plt.ylabel("Accuracy (%)")
plt.xlabel("Average latency (ms)")
plt.show()
plot_metrics(perf_metrics, optim_type)